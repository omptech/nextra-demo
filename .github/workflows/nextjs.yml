name: Build, Deploy, and Manage PR Previews

on:
  push:
    branches:
      - master
  pull_request:
    branches: 
      - master
  pull_request_target:
    types: [closed]

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Detect package manager
      id: detect-package-manager
      run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "18"
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        static_site_generator: next
    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
    - name: Install yarn
      run: npm install -g yarn
    - name: Install dependencies
      run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
    - name: Static HTML export with Next.js
      run: ${{ steps.detect-package-manager.outputs.runner }} export
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
          path: ./out
      env:
        # Use environment variables as needed for your build process
        NEXT_PUBLIC_PR_NUMBER: ${{ github.event.pull_request.number }}

    - name: Deploy to GitHub Pages (Production)
      if: github.event_name == 'push'
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        branch: gh-pages
        folder: out
        token: ${{ secrets.GITHUB_TOKEN }}
        # No target-folder for production deployment

    - name: Deploy PR Preview to GitHub Pages (Alternative)
      if: github.event_name == 'pull_request'
      run: |
        # Setup git with your identity
        git config --global user.name "omptech"
        git config --global user.email "omprakashlodhi38@gmail.com"

        # Ensure the 'out' directory exists and has content
        if [ ! -d out ] || [ -z "$(ls -A out)" ]; then 
          echo "The 'out' directory is missing or empty. Check the build step."
          exit 1
        fi

        # Discard changes in the current branch
        git restore --source=HEAD --staged --worktree -- .
        
        # Setup and use a worktree for gh-pages branch
        git fetch origin gh-pages
        git worktree add gh-pages-temp gh-pages

        # This example assumes the PR preview should be placed in a directory named after the PR number
        rm -rf gh-pages-temp/pr-${{ github.event.pull_request.number }}/*
        mkdir -p gh-pages-temp/pr-${{ github.event.pull_request.number }}
        cp -r out/* gh-pages-temp/pr-${{ github.event.pull_request.number }}/

        # Navigate to the gh-pages worktree, commit, and push changes
        cd gh-pages-temp
        git add .
        git commit -m "Deploy PR preview for PR #${{ github.event.pull_request.number }}" || echo "No changes to commit"
        git push origin gh-pages

        # Clean up: remove the temporary worktree
        cd ..
        git worktree remove gh-pages-temp
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment PR Preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v5
      with:
        script: |
          const issueNumber = context.issue.number;
          const prPreviewUrl = `https://omptech.github.io/nextra-demo/pr-${issueNumber}`;
          const message = `ðŸš€ PR preview is available at ${prPreviewUrl}`;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: message
          });
        github-token: ${{ secrets.GITHUB_TOKEN }}

  cleanup-preview:
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'gh-pages'

      - name: Configure Git
        run: |
          git config user.name "omptech"
          git config user.email "omprakashlodhi38@gmail.com"

      - name: Cleanup PR Preview
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          DIRECTORY="pr-$PR_NUMBER"
          # Find the directory in the gh-pages branch and delete it if found
          git fetch origin gh-pages
          git checkout gh-pages
          if [ -d "$DIRECTORY" ]; then
          echo "Directory $DIRECTORY found, deleting..."
          git rm -rf "$DIRECTORY"
          git commit -m "Remove preview for PR #$PR_NUMBER"
          git push origin gh-pages
          else
          echo "Directory $DIRECTORY not found, skipping deletion."
          fi
